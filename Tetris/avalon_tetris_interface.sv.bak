module avalon_tetris_interface (
    input logic CLK,
    input logic RESET,
    input logic AVL_READ,
    input logic AVL_WRITE,
    input logic AVL_CS,
    input logic [5:0] AVL_ADDR,
    input logic [31:0] AVL_WRITEDATA,
    output logic [31:0] AVL_READDATA,
    
    output logic [47:0] EXPORT_DATA,
);

    // Reg file is a 32 unpacked array of 32-bit packed arrays:
    // - Registers [19:0] will store a 10-bit bit vector which would refer to the game board
    // - Registers [21:20] refer to the Start and Done signals for reading and moving a piece
    // - Registers [23:22] refer to the Start and Done signals for placing a piece
    // - Registers [25:24] refer to the VGA_HS and VGA_VS signals
    // - Reigsters [28:26] refer to the RGB values for the VGA output
    // - Register [29] refers the score
    // - Register [30] refers to the keycode
    logic [31:0] REG_FILE[32];
    
    logic [9:0] drawxsig, drawysig, ballxsig, ballysig, ballsizesig;
	logic [7:0] Red, Blue, Green;
	logic [7:0] keycode;
    
    logic MOVE_START, MOVE_DONE, PLACE_START, PLACE_DONE;
    logic [3:0] count, state;
    
    always_ff @ (posedge CLK or posedge RESET)
    begin
        if (RESET)  // when reset
        begin
            // clear register file
            for (int i = 0; i < 16; i++)
            begin
                REG_FILE[i] <= 32'b0;
            end
        end
        else
        begin
            if (AVL_CS && AVL_WRITE)                                             // if chip is selected
                REG_FILE[AVL_ADDR] <= AVL_WRITEDATA;
            else
            begin
                REG_FILE[21][0] <= MOVE_DONE;
                REG_FILE[23][0] <= PLACE_DONE;
                REG_FILE[24][0] <= VGA_HS;
                REG_FILE[25][0] <= VGA_VS;
                REG_FILE[26][8:0] <= Blue;
                REG_FILE[27][8:0] <= Green;
                REG_FILE[26][8:0] <= Red;
            end
        end
    end
    
    always_comb                                 // read data set to data_out
    begin
        if (AVL_CS && AVL_READ)
            AVL_READDATA = REG_FILE[AVL_ADDR];
        else
            AVL_READDATA = 32'b0;
    end
    

    vga_controller u1(
        .Clk(CLK),
        .Reset(RESET),
        .hs(VGA_HS),
        .vs(VGA_VS),
        .pixel_clk(CLK),
        .blank(),
        .sync(),
        .DrawX(drawxsig),
        .DrawY(drawysig)
    );
     
    color_mapper u2(
        .BallX(ballxsig),
        .BallY(ballysig),
        .DrawX(drawxsig),
        .DrawY(drawysig),
        .Ball_size(ballsizesig),
        .Red(Red),
        .Green(Green),
        .Blue(Blue)
    );
     
    ball u3(
        .Reset(RESET),
        .frame_clk(VGA_VS),
        .keycode(keycode),
        .BallX(ballxsig),
        .BallY(ballysig),
        .BallS(ballsizesig)
    );
    
endmodule