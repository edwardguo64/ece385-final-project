module moving (
    input logic CLK,
    input logic RESET,
    
    input logic START,
    output logic DONE,
    
    input logic [7:0] keycode,      // keycode
    input logic [31:0] board[20],   // current board
    
    input logic [3:0] start_pos_x,  // start position of the piece
    input logic [4:0] start_pos_y,
    output logic [3:0] curr_pos_x,  // current position of the piece
    output logic [4:0] curr_pos_y,
    output logic [3:0] end_pos_x,   // end position of the piece
    output logic [4:0] end_pos_y,
    
    input logic [2:0] piece_type,   // type of piece
    output logic [1:0] curr_orient  // current orientatio of piece
);

    enum logic [1:0] {Wait, Moving, Done} State, Next_state;
    logic [1:0] orientation, Next_orientation;  // orientation: 0, 1, 2, 3
    logic [3:0] pos_x, Next_pos_x;
    logic [4:0] pos_y, Next_pos_y;
    logic stop;
    enum logic [2:0] {I, O, T, S, Z, J, L} piece;
    logic [3:0] cell1_x, cell2_x, cell3_x;
    logic [4:0] cell1_y, cell2_y, cell3_x;
    
    assign piece = piece_type;
    
    always_ff @ (posedge RESET or posedge CLK)
    begin
        if (RESET)
        begin
            State <= Wait
            pos_x <= 4'd4;
            pos_y <= 5'd0;
            orientation <= 2'd0;
        end
        else
        begin
            State <= Next_state;
            pos_x <= Next_pos_x;
            pos_y <= Next_pos_y;
            orientation <= Next_orientation;
        end
    end
    
    always_comb
    begin
        Next_state = State;
        Next_pos_x = pos_x;
        Next_pos_y = pos_y;
        Next_orientation = orientation;
        
        stop = 1'b0;
        
        unique case (State)
            Wait :
                if (START)
                    Next_state = Moving;
            Moving :
                if (stop)
                    Next_state = Done;
            Done :
                if (!START)
                    Next_state = Wait;
            default : ;
        endcase
        
        case (State)
            Wait : ;
            Moving :
                begin
                    case (keycode)
                        8'h04 :
                        begin
                            Next_pos_x = pos_x - 1;
                        end
                    endcase
                    
                    case (piece)
                        I :
                        begin
                            case (orientation)
                            2'd0 :
                            begin
                            end
                            2'd1 :
                            begin
                            end
                            2'd2 :
                            begin
                            end
                            2'd3 :
                            begin
                            end
                            endcase
                        end
                        O :
                        begin
                            case (orientation)
                            2'd0 :
                            begin
                            end
                            2'd1 :
                            begin
                            end
                            2'd2 :
                            begin
                            end
                            2'd3 :
                            begin
                            end
                            endcase
                        end
                        T :
                        begin
                            case (orientation)
                            2'd0 :
                            begin
                            end
                            2'd1 :
                            begin
                            end
                            2'd2 :
                            begin
                            end
                            2'd3 :
                            begin
                            end
                            endcase
                        end
                        S :
                        begin
                            case (orientation)
                            2'd0 :
                            begin
                            end
                            2'd1 :
                            begin
                            end
                            2'd2 :
                            begin
                            end
                            2'd3 :
                            begin
                            end
                            endcase
                        end
                        Z :
                        begin
                            case (orientation)
                            2'd0 :
                            begin
                            end
                            2'd1 :
                            begin
                            end
                            2'd2 :
                            begin
                            end
                            2'd3 :
                            begin
                            end
                            endcase
                        end
                        J :
                        begin
                            case (orientation)
                            2'd0 :
                            begin
                            end
                            2'd1 :
                            begin
                            end
                            2'd2 :
                            begin
                            end
                            2'd3 :
                            begin
                            end
                            endcase
                        end
                        L :
                        begin
                            case (orientation)
                            2'd0 :
                            begin
                            end
                            2'd1 :
                            begin
                            end
                            2'd2 :
                            begin
                            end
                            2'd3 :
                            begin
                            end
                            endcase
                        end
                        default : ;
                    endcase
                end
            Done :
                end_pos_x = pos_x;
                end_pos_y = pos_y;
            default : ;
        endcase
    end
    
    always_comb
    begin
        case (piece_type)
            I :
            begin
                case (orientation)
                    2'd0 :
                    begin
                        cell1_x = pos_x - 1;    // 1 c 2 3
                        cell2_x = pos_x + 1;
                        cell3_x = pos_x + 2;
                        
                        cell1_y = pos_y;
                        cell2_y = pos_y;
                        cell3_y = pos_y;
                    end
                    2'd1 :
                    begin
                        cell1_x = pos_x;        // 3
                        cell2_x = pos_x;        // 2
                        cell3_x = pos_x;        // c
                                                // 1
                        cell1_y = pos_y + 1;
                        cell2_y = pos_y - 1;
                        cell3_y = pos_y - 2;
                    end
                    2'd2 :
                    begin
                        cell1_x = pos_x - 1;    // 1 c 2 3
                        cell2_x = pos_x + 1;
                        cell3_x = pos_x + 2;
                        
                        cell1_y = pos_y;
                        cell2_y = pos_y;
                        cell3_y = pos_y;
                    end
                    2'd3 :
                    begin
                        cell1_x = pos_x;        // 3
                        cell2_x = pos_x;        // 2
                        cell3_x = pos_x;        // c
                                                // 1
                        cell1_y = pos_y + 1;
                        cell2_y = pos_y - 1;
                        cell3_y = pos_y - 2;
                    end
                endcase
            end
            O :
            begin
                case (orientation)
                    2'd0 :
                    begin
                        cell1_x = pos_x + 1;    // c 1
                        cell2_x = pos_x;        // 2 3
                        cell3_x = pos_x + 1;
                        
                        cell1_y = pos_y;
                        cell2_y = pos_y + 1;
                        cell3_y = pos_y + 1;
                    end
                    2'd1 :
                    begin
                        cell1_x = pos_x + 1;    // c 1
                        cell2_x = pos_x;        // 2 3
                        cell3_x = pos_x + 1;
                        
                        cell1_y = pos_y;
                        cell2_y = pos_y + 1;
                        cell3_y = pos_y + 1;
                    end
                    2'd2 :
                    begin
                        cell1_x = pos_x + 1;    // c 1
                        cell2_x = pos_x;        // 2 3
                        cell3_x = pos_x + 1;
                        
                        cell1_y = pos_y;
                        cell2_y = pos_y + 1;
                        cell3_y = pos_y + 1;
                    end
                    2'd3 :
                    begin
                        cell1_x = pos_x + 1;    // c 1
                        cell2_x = pos_x;        // 2 3
                        cell3_x = pos_x + 1;
                        
                        cell1_y = pos_y;
                        cell2_y = pos_y + 1;
                        cell3_y = pos_y + 1;
                    end
                endcase
            end
            T :
            begin
                case (orientation)
                    2'd0 :
                    begin
                        cell1_x = pos_x - 1;    //   2
                        cell2_x = pos_x;        // 1 c 3
                        cell3_x = pos_x + 1;
                        
                        cell1_y = pos_y;
                        cell2_y = pos_y - 1;
                        cell3_y = pos_y;
                    end
                    2'd1 :
                    begin
                        cell1_x = pos_x;        // 1
                        cell2_x = pos_x + 1;    // c 2
                        cell3_x = pos_x;        // 3
                        
                        cell1_y = pos_y - 1;
                        cell2_y = pos_y;
                        cell3_y = pos_y + 1;
                    end
                    2'd2 :
                    begin
                        cell1_x = pos_x + 1;    // 3 c 1
                        cell2_x = pos_x;        //   2
                        cell3_x = pos_x - 1;
                        
                        cell1_y = pos_y;
                        cell2_y = pos_y + 1;
                        cell3_y = pos_y;
                    end
                    2'd3 :
                    begin
                        cell1_x = pos_x;        //   3
                        cell2_x = pos_x - 1;    // 2 c
                        cell3_x = pos_x;        //   1
                        
                        cell1_y = pos_y + 1;
                        cell2_y = pos_y;
                        cell3_y = pos_y - 1;
                    end
                endcase
            end
            S :
            begin
                case (orientation)
                    2'd0 :
                    begin
                        cell1_x = pos_x - 1;    //   2 3
                        cell2_x = pos_x;        // 1 c
                        cell3_x = pos_x + 1;
                        
                        cell1_y = pos_y;
                        cell2_y = pos_y - 1;
                        cell3_y = pos_y - 1;
                    end
                    2'd1 :
                    begin
                        cell1_x = pos_x;        // 3
                        cell2_x = pos_x - 1;    // 2 c
                        cell3_x = pos_x - 1;    //   1
                        
                        cell1_y = pos_y + 1;
                        cell2_y = pos_y;
                        cell3_y = pos_y - 1;
                    end
                    2'd2 :
                    begin
                        cell1_x = pos_x - 1;    //   2 3
                        cell2_x = pos_x;        // 1 c
                        cell3_x = pos_x + 1;
                        
                        cell1_y = pos_y;
                        cell2_y = pos_y - 1;
                        cell3_y = pos_y - 1;
                    end
                    2'd3 :
                    begin
                        cell1_x = pos_x;        // 3
                        cell2_x = pos_x - 1;    // 2 c
                        cell3_x = pos_x - 1;    //   1
                        
                        cell1_y = pos_y + 1;
                        cell2_y = pos_y;
                        cell3_y = pos_y - 1;
                    end
                endcase
            end
            Z :
            begin
                case (orientation)
                    2'd0 :
                    begin
                        cell1_x = pos_x - 1;    // 1 2
                        cell2_x = pos_x;        //   c 3
                        cell3_x = pos_x + 1;
                        
                        cell1_y = pos_y - 1;
                        cell2_y = pos_y - 1;
                        cell3_y = pos_y;
                    end
                    2'd1 :
                    begin
                        cell1_x = pos_x + 1;    //   1
                        cell2_x = pos_x + 1;    // c 2
                        cell3_x = pos_x;        // 3
                        
                        cell1_y = pos_y - 1;
                        cell2_y = pos_y;
                        cell3_y = pos_y + 1;
                    end
                    2'd2 :
                    begin
                        cell1_x = pos_x - 1;    // 1 2
                        cell2_x = pos_x;        //   c 3
                        cell3_x = pos_x + 1;
                        
                        cell1_y = pos_y - 1;
                        cell2_y = pos_y - 1;
                        cell3_y = pos_y;
                    end
                    2'd3 :
                    begin
                        cell1_x = pos_x + 1;    //   1
                        cell2_x = pos_x + 1;    // c 2
                        cell3_x = pos_x;        // 3
                        
                        cell1_y = pos_y - 1;
                        cell2_y = pos_y;
                        cell3_y = pos_y + 1;
                    end
                endcase
            end
            J :
            begin
                case (orientation)
                    2'd0 :
                    begin
                        cell1_x = pos_x - 1;    // 1
                        cell2_x = pos_x - 1;    // 2 c 3
                        cell3_x = pos_x + 1;
                        
                        cell1_y = pos_y - 1;
                        cell2_y = pos_y;
                        cell3_y = pos_y;
                    end
                    2'd1 :
                    begin
                        cell1_x = pos_x + 1;    // 2 1
                        cell2_x = pos_x;        // c
                        cell3_x = pos_x;        // 3
                        
                        cell1_y = pos_y - 1;
                        cell2_y = pos_y - 1;
                        cell3_y = pos_y + 1;
                    end
                    2'd2 :
                    begin
                        cell1_x = pos_x + 1;    // 3 c 2
                        cell2_x = pos_x + 1;    //     1
                        cell3_x = pos_x - 1;
                        
                        cell1_y = pos_y + 1;
                        cell2_y = pos_y;
                        cell3_y = pos_y;
                    end
                    2'd3 :
                    begin
                        cell1_x = pos_x - 1;    //   3
                        cell2_x = pos_x;        //   c
                        cell3_x = pos_x;        // 2 1
                        
                        cell1_y = pos_y + 1;
                        cell2_y = pos_y + 1;
                        cell3_y = pos_y - 1;
                    end
                endcase
            end
            L :
            begin
                case (orientation)
                    2'd0 :
                    begin
                        cell1_x = pos_x - 1;    //     3
                        cell2_x = pos_x + 1;    // 1 c 2
                        cell3_x = pos_x + 1;
                        
                        cell1_y = pos_y;
                        cell2_y = pos_y;
                        cell3_y = pos_y - 1;
                    end
                    2'd1 :
                    begin
                        cell1_x = pos_x;        // 1
                        cell2_x = pos_x;        // c
                        cell3_x = pos_x + 1;    // 2 3
                        
                        cell1_y = pos_y - 1;
                        cell2_y = pos_y + 1;
                        cell3_y = pos_y + 1;
                    end
                    2'd2 :
                    begin
                        cell1_x = pos_x + 1;    // 2 c 1
                        cell2_x = pos_x - 1;    // 3
                        cell3_x = pos_x - 1;
                        
                        cell1_y = pos_y;
                        cell2_y = pos_y;
                        cell3_y = pos_y + 1;
                    end
                    2'd3 :
                    begin
                        cell1_x = pos_x;        // 3 2
                        cell2_x = pos_x;        //   c
                        cell3_x = pos_x - 1;    //   1
                        
                        cell1_y = pos_y + 1;
                        cell2_y = pos_y - 1;
                        cell3_y = pos_y - 1;
                    end
                endcase
            end
            default : ;
        endcase
    end
    
    assign curr_pos_x = pos_x;
    assign curr_pos_y = pos_y;
    assign curr_orient = orientation;

endmodule